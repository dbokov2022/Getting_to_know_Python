# Анонимные, lambda функции
def select(f, col):
    return [f(x) for x in col]
def where(f, col):
    return [x for x in col if f(x)]

data = '1 2 3 5 8 15 23 38'.split()
print(data)
data = select(int, data)
print(data)

# data = where(lambda e: not e % 2, data)
# print(data)
#
# data = list(select(lambda e: (e, e**2), data))
# print(data)

print()
###############################
# Функция map() применяет указанную функцию к
# каждому элементу итерируемого объекта и
# возвращает итератор с новыми объектами.
# f(x) ⇒ x + 10
# map(f, [ 1, 2, 3, 4, 5])
# ↓ ↓ ↓ ↓ ↓
# [ 11, 12, 13, 14, 15]
# Нельзя пройтись дважды
# data = '1 2 3 5 8 15 23 38'.split()
# res = list(map(int, data))  # преобразуем в список
# print(res)

# Функция filter() применяет указанную функцию к
# каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для
# которых функция вернула True.
# f(x) ⇒ x - чётное
# filter(f, [ 1, 2, 3, 4,5])
# ↓
# [ 2, 4 ]
# Нельзя пройтись дважды
# res = list(filter(lambda x: not x % 2, res))  # выбраны четные
# print(res)
#
# res = list(map(lambda x: (x, x**2), res))  # x**2
# print(res)

# Функция zip() применяется к набору итерируемых
# объектов и возвращает итератор с кортежами из
# элементов входных данных.
# Количество элементов в результате равно минимальному количеству элементов входного набора
# zip ([1, 2, 3], [ ‘о‘, ‘д‘, ‘т‘], [‘f’,’s’,’t’])
# ↓
# [(1, 'о', 'f'), (2, 'д', 's'), (3, 'т', 't')]
# Нельзя пройтись дважды


# Функция enumerate
# Функция enumerate() применяется к итерируемому
# объекту и возвращает новый итератор с кортежами
# из индекса и элементов входных данных.
# enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])
# ↓
# [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]
# Нельзя пройтись дважды


# List Comprehension
# [exp for item in iterable]
# [exp for item in iterable (if conditional)]
# [exp <if conditional> for item in iterable (if conditional)]